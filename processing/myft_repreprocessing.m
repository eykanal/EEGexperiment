% This function was used to re-do the frequency analysis to include higher
% frequencies. I had previously done a 1-40 bandpass filter to remove
% unnecessary noise, but after finding significant signals during viewing
% in lower frequencies we wanted to examine higher frequencies for similar
% signals.

all = { ...
'17-4-1-preprocessed-resp-coh-20.mat', ...
'17-4-1-preprocessed-resp-coh-6.mat', ...
'17-4-1-preprocessed-resp-coh-8.5.mat', ...
'17-4-2-preprocessed-resp-coh-20.mat', ...
'17-4-2-preprocessed-resp-coh-6.mat', ...
'17-4-2-preprocessed-resp-coh-8.5.mat', ...
'17-4-3-preprocessed-resp-coh-20.mat', ...
'17-4-3-preprocessed-resp-coh-8.5.mat', ...
'17-4-4-preprocessed-resp-coh-20.mat', ...
'17-4-4-preprocessed-resp-coh-8.5.mat', ...
'18-5-1-preprocessed-resp-coh-12.mat', ...
'18-5-1-preprocessed-resp-coh-25.mat', ...
'18-5-1-preprocessed-resp-coh-7.mat', ...
'18-6-1-preprocessed-resp-coh-12.mat', ...
'18-6-1-preprocessed-resp-coh-25.mat', ...
'18-6-1-preprocessed-resp-coh-7.mat', ...
'18-6-2-preprocessed-resp-coh-12.mat', ...
'18-6-2-preprocessed-resp-coh-25.mat', ...
'18-6-2-preprocessed-resp-coh-7.mat', ...
'18-6-3-preprocessed-resp-coh-12.mat', ...
'18-6-3-preprocessed-resp-coh-25.mat', ...
'18-6-3-preprocessed-resp-coh-7.mat', ...
'19-6-1-preprocessed-resp-coh-15.mat', ...
'19-6-1-preprocessed-resp-coh-25.mat', ...
'19-6-1-preprocessed-resp-coh-8.mat', ...
'19-6-2-preprocessed-resp-coh-15.mat', ...
'19-6-2-preprocessed-resp-coh-25.mat', ...
'19-6-2-preprocessed-resp-coh-8.mat', ...
'19-6-3-preprocessed-resp-coh-15.mat', ...
'19-6-3-preprocessed-resp-coh-25.mat', ...
'19-6-3-preprocessed-resp-coh-8.mat', ...
};

high = findSubset(all, '-(20|25)\.mat');
mid  = findSubset(all, '-(8.5|12|15)\.mat');
low  = findSubset(all, '-(6|7|8)\.mat');

for n=1:length(all)
    dataset = all{n};

    % load preprocessed dataset
    load(dataset);

    % get filename, trial times
    cfg = [];
    cfg.dataset = data_preprocessed.hdr.orig.raw.info.filename;
    if isfield(data_preprocessed.cfg,'trl')
        cfg.trl     = data_preprocessed.cfg.trl;
    else
        cfg.trl     = [data_preprocessed.sampleinfo repmat(-1000,size(data_preprocessed.sampleinfo,1),1)];
    end
    cfg.hdr     = data_preprocessed.hdr;
    clear data_preprocessed;

    % ft_preprocessing
    cfg.dftfilter       = 'yes';
    cfg.dftfreq         = [60 120];
    data_preprocessed   = ft_preprocessing(cfg);

    % scale down gradiometers
    grads               = regexp(data_preprocessed.label, 'MEG\d{3}[23]');  % find them
    grads               = ~(cellfun(@isempty, grads));  % convert from cell to bool

    for n = 1:length(data_preprocessed.trial)
        % ## Eventually, determine variance of mags, grads, 
        % ## scale grads in proportion to difference between
        % ## variances. For now, just scale down to 5% of
        % ## original.

        data_preprocessed.trial{n}(grads, :) = data_preprocessed.trial{n}(grads, :)*0.05;
    end

    % save newly preprocessed data
    path    = fileparts(which(dataset));
    tokens  = regexp(dataset,'(\d{2})-(\d)-(\d)-preprocessed-resp-coh-(\d{1,2}\.?\d?)\.mat','tokens');
    tokens  = tokens{1};
    save([path '/' sprintf('%s-%s-%s-preprocessed2-resp-coh-%s.mat',tokens{1},tokens{2},tokens{3},tokens{4})], 'data_preprocessed');
end

% run TFR, save, plot, save
disp('Don''t forget to run a modified`dots_freqAnalysis` to run over the `preprocessed2` datasets!');

