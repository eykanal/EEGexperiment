% function [RT, ER, RDir, score, opponent_score,premie_t,premie_d,timeS] = ...% 	trial (windowptr, direc, corkey, D, scorein, opponent_scorein, ...% 	money, opponent_money, salary, ntrial, feedback )function [RT, ER, RDir, score, premie_t,premie_d,timeS] = ...    trial (dotsIdx, targetIdx, blackTargetIdx, textIdx, ppd_, direc, corcode, D, shape, scorein, ntrial, ...	money, salary, ...    pahandle_correct, pahandle_antic, daq )% 10/27/08: Modified for free-response fMRI experiment.% function [RT, ER, score] = trial (windowptr, direc, corkey, D ,Dpen, scorein)% % One experimental trial% Inputs:%  windowptr - pointer to the screen window%  direc - direction of dots%  corkey - correct key for this trial as number by crazy Mac%  D - Response-Stimulus Interval%  Dpen - Additional Delay after making an error%  scorein - starting score of the subject% Outputs:%  RT - reaction time [in seconds]%  ER - error = 1, correct = 0%  score - score after the trial% % 'feedback' -- flag indicating whether feedback should be presented% if corkey == 'Z'	%Mac has strange representation of keys: z=7, m=47% % 	corcode = 7;%     corcode = 29;% else% % 	corcode = 47;%     corcode = 16;% end% rSet ('dots', [1], 'direction', direc);% % Set direction of dots movement% % rSet( 'target', [1], 'visible', 1 );rSet('dXdots',dotsIdx,'direction',direc,'visible',true);rSet('dXtarget',targetIdx,'visible',true);rSet('dXtarget',blackTargetIdx,'visible',true);if daq ~= -1    if direc == 0        DaqDOut(daq, 0, 10);   % 1 volt is for Rightward motion    else        DaqDOut(daq, 0, 5); % 0.5 volts is for Leftward motion    endendtimeS = GetSecs;[ mySecs, myKeyCode ] = rGraphicsDrawSelectiveBreak(inf,[],[29 16]);% timeR = GetSecs;if daq ~= -1    DaqDOut(daq, 0, 0);endtimeR = mySecs;% rDone;% return;% % rGraphicsBlank;rSet('dXdots',dotsIdx,'visible',false);rGraphicsDraw;% Throwing in a check here to make sure that timeR is not less than % 100 msec. If so, incur a penalty and move to penalizing delay period, % returning the normal statistics that would've been returned (thus % the code that analyzes statistics should take care of RTs of < 100 % msec, by throwing those trials out). Currently this version of the % code does not return the number of premature presses.RT = timeR - timeS;% [keydown, secs, keycode] = KbCheck;% keynum = find(keycode);keynum = find(myKeyCode);if isempty (keynum)	keynum = 0;endER = (keynum(1) ~= corcode);% rGraphicsBlank;% rRecurStop ('dots', [1]);% % Stops movement of dots% % rRecurStop('target',[1]);% Screen(windowptr,'FillRect',255);% Here's the 100 msec check:if RT > 0.1	score = scorein + ~ER;else	score = scorein;end% Get the particular direction of this trial:% if keynum == 7if keynum == 29	RDir = 'L';% elseif keynum == 47elseif keynum == 16	RDir = 'R';else	RDir = '-';endfeedback = 1;% 10/27/08: Now making a gamma-distributed RSI, with shape and mean% parameters sent by the calling function: scale = D/shape;RSI = gamrnd(shape,scale);if RT > 0.1	if ER		delay = RSI;	elseif feedback		dur = makesound2(pahandle_correct);		delay = RSI - dur;	else		delay = RSI;	end	% Every 10 trials, display feedback for 0.5 seconds:    if (mod( ntrial, 5 ) == 1) && feedback        % 		TextCenter (windowptr, sprintf ('Score: %d', score), 0, 12);        rGraphicsBlank;        fontsize = 20;        str = sprintf ('Score: %d', score);        textwidth = fontsize*length(str)/ppd_;        x_pos = -0.3*textwidth;        rSet('dXtext',textIdx,'string',str,'visible',true,...            'x', x_pos, 'y', 0, ...            'size', fontsize);%         rAdd('dXtext', 1, 'visible', true, ...%         'x', x_pos, 'y', 0, ...%         'size', fontsize, ...%         'font', 'Courier',  ...%         'bold', true, ...%         'color', [1 1 1]*255, ...%         'string', str);% %         rGraphicsDraw(500);        rGraphicsDraw(delay);        % 		TextCenter (windowptr, sprintf ('Opponent: %d', opponent_score), 24, 12);% 		delay = max( delay, 0.5 );  % Ensure feedback of 0.5 seconds	endelse	% This is a penalty delay, so might as well make it big:	dur = makesound2(pahandle_antic);	delay = 4 - dur;endpremie_t = []; premie_d = [];% 5/3/06: Soak up any continuous button pressing and don't do anything during such a time:while KbCheck    WaitSecs(0.001);end% Get a current time for the offset of the subject's keypress:start = GetSecs;% Wait for the RSI to expire. If it does, return. If it doesn't, go to the premie keypress % code below:while ~KbCheck	s = GetSecs - start;    WaitSecs(0.001);	if s >= delay%         rDone;            rGraphicsBlank;		return	endend% If the function gets to here, then they made a premature keypress, % so penalize them:% dur = makesound;% 	start = GetSecs;% 9/14/05: Could determine inter-premature-press interval here:% premie_t = []; premie_d = [];% 5/3/06: make delay 4 seconds:s = GetSecs;% This is a penalty delay, so might as well make it big:% dur = makesound('errorsound');dur = makesound2(pahandle_antic);delay = 4 - dur;premie_t = [premie_t, s - start];start = s;keynum = find(myKeyCode);if isempty (keynum)	keynum = 0;end% if keynum == 7if keynum == 29	premie_d = [premie_d,'L'];% elseif keynum == 47elseif keynum == 16	premie_d = [premie_d,'R'];else	premie_d = [premie_d,'-'];endwhile 1% 	n = 0.1 * randn( 1 );% 	if n < -D% 		n = -D + 0.01;% 	end	% Empty loop to absorb continuous pressing:	while KbCheck		WaitSecs(0.001);	end	while ~KbCheck		s = GetSecs - start;        WaitSecs(0.001);		if s >= delay            %             rDone;            rGraphicsBlank;            			return		end	end	% 	dur = makesound;		% 	start = GetSecs;	% 9/14/05: Could determine inter-premature-press interval here:	s = GetSecs;	% This is a penalty delay, so might as well make it big:% 	dur = makesound('errorsound');    dur = makesound2(pahandle_antic);	delay = 4 - dur;% 	premie = s - start;	premie_t = [premie_t, s - start];	start = s;	keynum = find(myKeyCode);	if isempty (keynum)		keynum = 0;	end% 	if keynum == 7	if keynum == 29		premie_d = [premie_d,'L'];% 	elseif keynum == 47	    elseif keynum == 16		premie_d = [premie_d,'R'];	else		premie_d = [premie_d,'-'];	endend